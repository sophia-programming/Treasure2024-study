振り返りのフレームワーク
→　KPT(keep, problem, try)
K...Keep(良かった点)
P...Problem(問題点)
T...Try(改善点)


API実装

フロントエンド側のルーティング
クライアントサイドルーティングを使用する:
React RouterやVue Routerなどのライブラリを使って、フロントエンド側でルーティングを定義します。
URLの変更をJavaScriptで制御し、対応するコンポーネントを表示します。
SPAの構築に適しており、画面遷移が高速になります。
メリット:
ページ遷移が高速で、ユーザー体験が向上します。
バックエンドへの不要なリクエストを減らせます。
画面の状態をURLで管理できます。
デメリット:
初期ロード時間が長くなる可能性があります。
SEO対策が難しくなる場合があります。
バックエンドAPI実装
RESTful APIの設計:
バックエンド側でAPIエンドポイントを定義し、データの取得や操作を行います。
HTTPメソッド(GET, POST, PUT, DELETE等)を使用して、リソースに対する操作を定義します。
エンドポイントの例:
GET /api/posts: 投稿一覧の取得
POST /api/posts: 新規投稿の作成
GET /api/posts/:id: 特定の投稿の取得
フロントエンドとの連携:
フロントエンドからAxiosなどのライブラリを使ってAPIリクエストを送信します。
受け取ったデータを状態管理ライブラリ(ReduxやVuexなど)で管理し、UIに反映させます。
セキュリティ対策:
CORS設定を適切に行い、許可されたオリジンからのリクエストのみを受け付けるようにします。
認証・認可の仕組みを実装し、APIへのアクセスを制御します。
このように、フロントエンド側でルーティングを行いつつ、必要なデータはバックエンドAPIから取得するという構成が一般的